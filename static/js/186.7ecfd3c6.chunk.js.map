{"version":3,"file":"static/js/186.7ecfd3c6.chunk.js","mappings":"kNAGMA,EAAU,2CAEVC,EAAM,gCACNC,EAAU,CACZC,KAAM,mBACNC,MAAO,SACPC,OAAQ,gBAICC,EAAS,mCAAG,WAAOC,GAAP,8FAAYC,EAAZ,+BAAkB,GAAIC,EAAtB,+BAA4B,GAA5B,SACEC,EAAAA,EAAAA,IAAA,UAAaT,GAAb,OAAmBC,EAAQK,IAA3B,OAAkCC,EAAlC,YAA2CC,GAA3C,OAAmDT,IADrD,cACfW,EADe,yBAGdA,EAASC,MAHK,2CAAH,qD,yHCiDtB,UAzDgB,WACZ,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA8BR,OA5BAE,EAAAA,EAAAA,YAAW,WAEP,IAAMC,EAAU,mCAAG,oGAGXR,GAAa,GACbE,EAAS,MAJE,UAMQX,EAAAA,EAAAA,GAAU,QAAD,UAAac,EAAb,aANjB,YAMLR,EANK,yBASTO,EAAWP,EAAKY,SATP,4GAaXP,EAAS,KAAMQ,SACfC,QAAQC,IAAR,MAdW,yBAgBXZ,GAAa,GAhBF,6EAAH,qDAsBhBQ,GAEH,GAAE,CAACH,KAGA,gCACCN,IAAa,SAAC,IAAD,IACbE,IAAS,uBAAIA,KACd,wBACCE,EAAQU,OAAS,EACXV,EAAQW,KAAI,WAAoBC,GAAS,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QACrB,OACI,2BAEI,wBAAKD,KACL,uBAAIC,MAHCF,EAOX,KACA,uBAAG,gDAKpB,C","sources":["components/MoviessAPI/MoviesAPI.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\n//const API_KEY = 'api_key=eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkYjdjNzk5ZDVlZDcwNzgyZGY1MTJiNTExNTRjMTg4NSIsInN1YiI6IjY0OTdjNzMzNjJmMzM1MDBjYTQzODYwMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nPeSofqctbcrTN-4r6SV8I78cs_JotRjk-M6zn_va2I';\nconst API_KEY = 'api_key=db7c799d5ed70782df512b51154c1885';\n//db7c799d5ed70782df512b51154c1885\nconst URL = 'https://api.themoviedb.org/3/';\nconst options = {\n    home: 'trending/all/day',\n    movie: 'movie/',\n    search: \"search/movie\",\n    \n}\n\nexport const getMovies = async (val, param='', query='') => {\n    const response = await axios.get(`${URL}${options[val]}${param}?${query}${API_KEY}`);\n   \n    return response.data;\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport { getMovies } from '../MoviessAPI/MoviesAPI.js';\nimport { Loader } from '../Loader/Loader.jsx'; \n\nconst Reviews = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();  \n\n    useEffect( () => {\n       \n        const getReviews = async () => {\n            \n            try{\n                setIsLoading(true);\n                setError(null);\n    \n                const data = await getMovies('movie', `${movieId}/reviews`);\n               \n                if(data)\n                  setReviews(data.results);\n                else return;\n               \n            }catch(error){\n                setError(error.message);\n                console.log(error)\n            }finally{\n                setIsLoading(false);\n            }\n            \n            \n        }\n        \n        getReviews();\n       \n    }, [movieId] );\n\n    return (\n        <>\n        {isLoading && <Loader />}\n        {error && <p>{error}</p>}\n        <ul>\n        {reviews.length > 0 \n            ?  reviews.map(({author, content}, idx) => {\n                return (\n                    <li key={idx}>\n                        \n                        <h3>{author}</h3>\n                        <p>{content}</p>\n                        \n                    </li>\n                \n                )})\n                : <p>We don't have any reviews to this movie</p>\n            }\n        </ul>\n    </>\n    )\n}\n\nexport default Reviews;"],"names":["API_KEY","URL","options","home","movie","search","getMovies","val","param","query","axios","response","data","useState","isLoading","setIsLoading","error","setError","reviews","setReviews","movieId","useParams","useEffect","getReviews","results","message","console","log","length","map","idx","author","content"],"sourceRoot":""}